/* Auto-generated by genmsg_cpp for file /home/gdp40/fuerte_workspace/sandbox/ASV/msg/compass.msg */
#ifndef ASV_MESSAGE_COMPASS_H
#define ASV_MESSAGE_COMPASS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ASV
{
template <class ContainerAllocator>
struct compass_ {
  typedef compass_<ContainerAllocator> Type;

  compass_()
  : heading(0.0)
  , roll(0.0)
  , pitch(0.0)
  , pitch_der(0.0)
  , temperature(0.0)
  , depth(0.0)
  , m(0.0)
  , mx(0.0)
  , my(0.0)
  , mz(0.0)
  , a(0.0)
  , ax(0.0)
  , ay(0.0)
  , az(0.0)
  {
  }

  compass_(const ContainerAllocator& _alloc)
  : heading(0.0)
  , roll(0.0)
  , pitch(0.0)
  , pitch_der(0.0)
  , temperature(0.0)
  , depth(0.0)
  , m(0.0)
  , mx(0.0)
  , my(0.0)
  , mz(0.0)
  , a(0.0)
  , ax(0.0)
  , ay(0.0)
  , az(0.0)
  {
  }

  typedef float _heading_type;
  float heading;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _pitch_der_type;
  float pitch_der;

  typedef float _temperature_type;
  float temperature;

  typedef float _depth_type;
  float depth;

  typedef float _m_type;
  float m;

  typedef float _mx_type;
  float mx;

  typedef float _my_type;
  float my;

  typedef float _mz_type;
  float mz;

  typedef float _a_type;
  float a;

  typedef float _ax_type;
  float ax;

  typedef float _ay_type;
  float ay;

  typedef float _az_type;
  float az;


  typedef boost::shared_ptr< ::ASV::compass_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ASV::compass_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct compass
typedef  ::ASV::compass_<std::allocator<void> > compass;

typedef boost::shared_ptr< ::ASV::compass> compassPtr;
typedef boost::shared_ptr< ::ASV::compass const> compassConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ASV::compass_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ASV::compass_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ASV

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ASV::compass_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ASV::compass_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ASV::compass_<ContainerAllocator> > {
  static const char* value() 
  {
    return "88afbcfc5596f414ffeacd3d60dc1ebd";
  }

  static const char* value(const  ::ASV::compass_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x88afbcfc5596f414ULL;
  static const uint64_t static_value2 = 0xffeacd3d60dc1ebdULL;
};

template<class ContainerAllocator>
struct DataType< ::ASV::compass_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ASV/compass";
  }

  static const char* value(const  ::ASV::compass_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ASV::compass_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 heading\n\
float32 roll\n\
float32 pitch\n\
float32 pitch_der\n\
float32 temperature\n\
float32 depth        \n\
float32 m\n\
float32 mx\n\
float32 my\n\
float32 mz\n\
float32 a\n\
float32 ax\n\
float32 ay\n\
float32 az\n\
\n\
\n\
";
  }

  static const char* value(const  ::ASV::compass_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ASV::compass_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ASV::compass_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.heading);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.pitch_der);
    stream.next(m.temperature);
    stream.next(m.depth);
    stream.next(m.m);
    stream.next(m.mx);
    stream.next(m.my);
    stream.next(m.mz);
    stream.next(m.a);
    stream.next(m.ax);
    stream.next(m.ay);
    stream.next(m.az);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct compass_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ASV::compass_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ASV::compass_<ContainerAllocator> & v) 
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "pitch_der: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_der);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "m: ";
    Printer<float>::stream(s, indent + "  ", v.m);
    s << indent << "mx: ";
    Printer<float>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<float>::stream(s, indent + "  ", v.my);
    s << indent << "mz: ";
    Printer<float>::stream(s, indent + "  ", v.mz);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASV_MESSAGE_COMPASS_H

