"""autogenerated by genpy from ASV/compass.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class compass(genpy.Message):
  _md5sum = "88afbcfc5596f414ffeacd3d60dc1ebd"
  _type = "ASV/compass"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 heading
float32 roll
float32 pitch
float32 pitch_der
float32 temperature
float32 depth        
float32 m
float32 mx
float32 my
float32 mz
float32 a
float32 ax
float32 ay
float32 az


"""
  __slots__ = ['heading','roll','pitch','pitch_der','temperature','depth','m','mx','my','mz','a','ax','ay','az']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heading,roll,pitch,pitch_der,temperature,depth,m,mx,my,mz,a,ax,ay,az

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(compass, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.heading is None:
        self.heading = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.pitch_der is None:
        self.pitch_der = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.depth is None:
        self.depth = 0.
      if self.m is None:
        self.m = 0.
      if self.mx is None:
        self.mx = 0.
      if self.my is None:
        self.my = 0.
      if self.mz is None:
        self.mz = 0.
      if self.a is None:
        self.a = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
    else:
      self.heading = 0.
      self.roll = 0.
      self.pitch = 0.
      self.pitch_der = 0.
      self.temperature = 0.
      self.depth = 0.
      self.m = 0.
      self.mx = 0.
      self.my = 0.
      self.mz = 0.
      self.a = 0.
      self.ax = 0.
      self.ay = 0.
      self.az = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14f.pack(_x.heading, _x.roll, _x.pitch, _x.pitch_der, _x.temperature, _x.depth, _x.m, _x.mx, _x.my, _x.mz, _x.a, _x.ax, _x.ay, _x.az))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.heading, _x.roll, _x.pitch, _x.pitch_der, _x.temperature, _x.depth, _x.m, _x.mx, _x.my, _x.mz, _x.a, _x.ax, _x.ay, _x.az,) = _struct_14f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14f.pack(_x.heading, _x.roll, _x.pitch, _x.pitch_der, _x.temperature, _x.depth, _x.m, _x.mx, _x.my, _x.mz, _x.a, _x.ax, _x.ay, _x.az))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.heading, _x.roll, _x.pitch, _x.pitch_der, _x.temperature, _x.depth, _x.m, _x.mx, _x.my, _x.mz, _x.a, _x.ax, _x.ay, _x.az,) = _struct_14f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14f = struct.Struct("<14f")
