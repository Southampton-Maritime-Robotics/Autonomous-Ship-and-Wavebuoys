/* Auto-generated by genmsg_cpp for file /home/gdp40/fuerte_workspace/sandbox/ASV/msg/position.msg */
#ifndef ASV_MESSAGE_POSITION_H
#define ASV_MESSAGE_POSITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ASV
{
template <class ContainerAllocator>
struct position_ {
  typedef position_<ContainerAllocator> Type;

  position_()
  : X(0.0)
  , Y(0.0)
  , speed(0.0)
  , lat(0.0)
  , long(0.0)
  , time(0.0)
  , ValidGPSfix(0)
  , number_of_satellites(0)
  {
  }

  position_(const ContainerAllocator& _alloc)
  : X(0.0)
  , Y(0.0)
  , speed(0.0)
  , lat(0.0)
  , long(0.0)
  , time(0.0)
  , ValidGPSfix(0)
  , number_of_satellites(0)
  {
  }

  typedef float _X_type;
  float X;

  typedef float _Y_type;
  float Y;

  typedef float _speed_type;
  float speed;

  typedef double _lat_type;
  double lat;

  typedef double _long_type;
  double long;

  typedef double _time_type;
  double time;

  typedef int8_t _ValidGPSfix_type;
  int8_t ValidGPSfix;

  typedef int8_t _number_of_satellites_type;
  int8_t number_of_satellites;


  typedef boost::shared_ptr< ::ASV::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ASV::position_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct position
typedef  ::ASV::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::ASV::position> positionPtr;
typedef boost::shared_ptr< ::ASV::position const> positionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ASV::position_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ASV::position_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ASV

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ASV::position_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ASV::position_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ASV::position_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0ff27e09213a0df37db82ae00fb8aecd";
  }

  static const char* value(const  ::ASV::position_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0ff27e09213a0df3ULL;
  static const uint64_t static_value2 = 0x7db82ae00fb8aecdULL;
};

template<class ContainerAllocator>
struct DataType< ::ASV::position_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ASV/position";
  }

  static const char* value(const  ::ASV::position_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ASV::position_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 X\n\
float32 Y\n\
float32 speed\n\
float64 lat\n\
float64 long\n\
float64 time\n\
int8 ValidGPSfix\n\
int8 number_of_satellites\n\
\n\
";
  }

  static const char* value(const  ::ASV::position_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ASV::position_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ASV::position_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.X);
    stream.next(m.Y);
    stream.next(m.speed);
    stream.next(m.lat);
    stream.next(m.long);
    stream.next(m.time);
    stream.next(m.ValidGPSfix);
    stream.next(m.number_of_satellites);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct position_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ASV::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ASV::position_<ContainerAllocator> & v) 
  {
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "long: ";
    Printer<double>::stream(s, indent + "  ", v.long);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "ValidGPSfix: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ValidGPSfix);
    s << indent << "number_of_satellites: ";
    Printer<int8_t>::stream(s, indent + "  ", v.number_of_satellites);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASV_MESSAGE_POSITION_H

