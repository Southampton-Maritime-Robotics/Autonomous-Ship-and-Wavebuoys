/* Auto-generated by genmsg_cpp for file /home/gdp40/fuerte_workspace/sandbox/ASV/msg/gps.msg */
#ifndef ASV_MESSAGE_GPS_H
#define ASV_MESSAGE_GPS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ASV
{
template <class ContainerAllocator>
struct gps_ {
  typedef gps_<ContainerAllocator> Type;

  gps_()
  : latitude(0.0)
  , longitude(0.0)
  , time(0.0)
  , number_of_satellites(0)
  , fix(0)
  , speed(0.0)
  , x(0.0)
  , y(0.0)
  {
  }

  gps_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  , time(0.0)
  , number_of_satellites(0)
  , fix(0)
  , speed(0.0)
  , x(0.0)
  , y(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;

  typedef double _time_type;
  double time;

  typedef int8_t _number_of_satellites_type;
  int8_t number_of_satellites;

  typedef int8_t _fix_type;
  int8_t fix;

  typedef double _speed_type;
  double speed;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;


  typedef boost::shared_ptr< ::ASV::gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ASV::gps_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct gps
typedef  ::ASV::gps_<std::allocator<void> > gps;

typedef boost::shared_ptr< ::ASV::gps> gpsPtr;
typedef boost::shared_ptr< ::ASV::gps const> gpsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ASV::gps_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ASV::gps_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ASV

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ASV::gps_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ASV::gps_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ASV::gps_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9c9f9b1f6b33d777ab50714e4764c884";
  }

  static const char* value(const  ::ASV::gps_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9c9f9b1f6b33d777ULL;
  static const uint64_t static_value2 = 0xab50714e4764c884ULL;
};

template<class ContainerAllocator>
struct DataType< ::ASV::gps_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ASV/gps";
  }

  static const char* value(const  ::ASV::gps_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ASV::gps_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 	latitude\n\
float64 	longitude\n\
float64 	time\n\
int8 		number_of_satellites\n\
int8 		fix\n\
float64 	speed\n\
float64 	x\n\
float64 	y\n\
\n\
";
  }

  static const char* value(const  ::ASV::gps_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ASV::gps_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ASV::gps_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
    stream.next(m.time);
    stream.next(m.number_of_satellites);
    stream.next(m.fix);
    stream.next(m.speed);
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct gps_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ASV::gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ASV::gps_<ContainerAllocator> & v) 
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "number_of_satellites: ";
    Printer<int8_t>::stream(s, indent + "  ", v.number_of_satellites);
    s << indent << "fix: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fix);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASV_MESSAGE_GPS_H

